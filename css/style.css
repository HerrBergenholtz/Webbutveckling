body { /*Selektorn body kommer välja allt som användaren ser*/
	background-color: #221a0f; /*Ändrar bakgrundsfärgen till mörkbrun*/
	color: #d3af86; /*Bestämmer färgen på all text på sidan*/
}

.container { /*Detta är en klasselektor som väljer "container", vilket är den div som omsluter allt inuti body. Detta finns till för att lägga till ett grid till bodyn.*/
	display: grid; /*Deklarerar display till grid. Grid är ett rutnätssystem som är uppbyggt av rader och kolumner där rader är horisontella och kolumner är vertikala.*/
	grid-template-columns: 2fr 1fr; /*Detta deklarerar hur stora och hur många kolumner man vill ha, jag använder mig av enheten fr(fractions), det är en relativ måttenhet så skillnaden i storlek mellan kolumnerna kommer vara samma oberoende av skärmstorlek. I detta fallet så har jag två kolumner där den första är dubbelt så stor som den andra.*/
	grid-template-rows: 1fr 8fr 1fr; /*Deklarerar hur många pch hur stora raderna ska vara.*/
	grid-template-areas: /*Detta är ett simpelt sätt att göra så att rätt element hamnar på rätt ställe i grid, för att deklarera den första raden så skriver man, inom citationstecken, ett namn och sedan ett mellanrum (detta deklarerar den första kolumnen i raden) och sedan ett till namn för nästa kolumnn i raden och så vidare. När man ska deklarera nästa rad så avslutar man citationstecknen och hoppar ner en rad och gör samma sak.*/
	"header header" /*Den första raden vill jag att headern helt ska ta upp så jag skriver header två gånger så att den tar upp hela raden*/ 
	"main aside" /*I den andra raden så vill jag att main och aside ska vara jämte varandra.*/
	"footer footer"; /*Till sist så deklarer jag att footer ska ta upp hela den sista raden.*/
	grid-gap: 10px; /*Dett gör så att det är ett 10 pixlars mellanrum mellan alla grid-items med enheten px(som står för pixlar).*/
	height: 97vh; /*Sätter höjden på container och därför hela sidan till 97vh, vilket är en relativ enhet som står för view-height, det kommer göra så att sidan alltid kommer ta upp nästintill hela skärmen (100vh är hela skärmen) detta gör jag för att jag vill att min footer ska vara längst ner på sidan oavsett skärmstorlek.*/
}

.container-fin-sida { /*Detta deklarationsblock ser ungefär likadant ut som det vanliga container blocket fast detta har en annorlunda layout som jag använder i fin-sida.html.*/
	display: grid;
	grid-template-columns: 1fr 2fr 1fr;
	grid-template-rows: 1fr 8fr 1fr;
	grid-template-areas: 
	"header header header"
	"aside main aside-2" /*Den enda skillnaden är att jag har en till aside som jag har gett namnet aside-2 så att jag ska kunna placera den i mitt grid korrekt.*/
	"footer footer footer";
	height: 97vh;
	grid-gap: 10px;
}

header { /*En typselektor som väljer min header.*/
	grid-area: header; /*Detta gör så att min header kommer placeras in i grid-arean för header, man deklarerar alltså det det element som man vill sätta in i ett grid med det grid-area namnet som man använder sig av i grid-template-areas i containern.*/
	margin: -8px; /*Tar bort all margin runt headern så att den är i toppen av skärmen utan något mellanrum ovanför eller vid sidan. Margin är det mellanrum som är utanför runt elementet.*/
	background-color: #473624; /*Ger header en annan bakgrundsfärg så att det ska bli tydligare att det är headern.*/
	height: 80px; /*Ger den en lämplig höjd*/
}

header img { /*Detta är en avkomlingsselektor, denna väljer alla bilder som är barn eller barn barn (osv) av header*/
	width: 60px; /*Sätter den maximala bredden på bilden*/
	margin-top: -20px; /*Tar bort margin på övre sidan av bilden för att ge den en mer lämplig position i header. Man kan välja att lägga till eller ta bort margin över, under, och åt vänster och höger med respektive, margin-top/bottum/left/right.*/
}

nav { /*Väljer min nav med en typselektor*/
	color: #367031; /*Ger den en annorlunda textfärg*/
	font-size: 18px; /*Ändrar på storleken på texten inom nav.*/
}

nav ul { /*Väljer den oordnade listan inuti min nav*/
	display: grid; /*Gör så att oordnade listan visas som ett grid, detta för att undvika att använda floats och göra det på ett mer responsivt sätt.*/
	grid-template-columns: 100px 250px 250px 250px; /*Deklarerar storlek och mängd kolumner fast i detta fallet så använder jag mig av px istället för fr. Man behöver inte deklarera grid-template-rows eftersom att det bara finns en rad.*/
	padding-inline-start: 10px; /*Detta är padding som kommer finnas där listan börjar, alltså till vänster om listan.*/
}

nav ul li { /*Väljer alla li element inuti den oordnade listan inuti min nav*/
	margin-left: auto; 
	margin-right: auto; /*Jag deklarerar margin till vänster och höger till auto vilket gör så att alla list element kommer vara centrerade inuti sina grids */
	padding: 10px; /*Ger list elementen padding. Padding är inte som margin, istället för att det är utamför självaste elementet så är detta innaför elementet, vilket gör att man kan göra så att det är mer rymligt mellan element utan att flytta runt på elementen med margin, alla element håller sig i sin ruta.*/
	list-style-type: none; /*Den här regeln ändrar list stilen till ingen, vanligtvis så har oordnade listor punkter framför varje list element men i detta fallet vill vi inte att de ska synas vilket är varför vi deklarerar denna regel.*/
	color: #367031;
}

nav ul li a { /*Väljer alla anchor element inuti list elementen inuti den oordnade listan inuti naven.*/
	padding: 14px;
	color: inherit; /*Gör så att färgen på texten kommer att vara den som den får i arv (alltså grön från list elementen) istället för den blåa färgen som länkar får vanligtvis.*/
	text-decoration: none; /*Tar bort all dekoration på texten, detta gör att länkarna inte kommer att vara understrukna som de vanligtvis är.*/
}

nav ul li:hover .dropdown-meny { /*Detta är en pseudoklass för när ett element hovras över*/
	display: block; /*När någon hovrar över list elementet som har dropdown-menyn som barn så kommer dropdown-menyn visas som block istället för none. Block betyder att elementet kommer att visas på en ny rad och kommer att ta upp all tillgänglig plats.*/
}

.dropdown-meny { /*En klassselektor som väljer en klass som jag har givit min oordnade lista inuti ett listelement inuti min oordnade lista inuti min nav, jag har valt att ge den en klass för att göra det lättare att läsa och skriva eftersom att man annars måste ha väldigt långa avkmlingsselektorer.*/
	margin: 20px 0px 0px -40px; /*Gör så att margin-top blir 20px och margin-left blir -40px. Om man ska skriva ut flera olika margins åt olika håll så är det smidigare att skriva ut fyra värden i margin då varje värde korresponderar till ett av riktningarna. Det första värdet är top, det andra värdet är right, det tredje värdet är bottum och det fjärde värdet är left.*/
	display: none; /*Deklarerar att dropdown-menyn inte kommer att visas.*/
	position: absolute; /*Absolut positionering används för att menyn ska visas relativt till förälder elementet vilket i detta fallet är list elementet som har den oordnade listan som är dropdown meny som barn, det används också för att göra så att listan inte tar plats på självaste bodyn utan finns ovanpå bodyn.*/
	background-color: bisque;
	border-radius: 0px 0px 15px 15px; /*Border radius är den radie som alla hörn på bordern har som jag anger med pixlar. Om man skriver ut fyra värden så som jag har gjort här så korresponderar det till alla fyra hörnen av bordern som elementet har. Det första värdet är hörnet uppe till vänster, det andra är uppe till höger, det tredje är nere till höger och det fjärde är nere till vänster. Detta har jag gjort för att jag bara vill att de nedre hörnen ska vara rundade.*/
	width: 200px; /*Bestämmer bredden på menyn*/
}

.dropdown-meny li { /*List elementen inuti menyn*/
	margin-left: 16px;
	text-align: center; /*Gör så att texten blir centrerad.*/
	width: 140px;
}

.dropdown-meny li a { /*Anchor elementen inuti listelementen inuti dropdown-menyn*/
	background-color: bisque;
	font-size: 1.3rem; /*Denna reglen sätter textextstorleken till 1.3rem, rem är en relativ enhet som förhåller säg till rot elementet, i det här fallet så vill jag att texten ska vara lite större än i rot elementet. */
	padding: 20px;
	display: block; /*Display block gör så att varje anchor kommer visas på en ny rad och ta upp så stort område som det kan, i detta fallet så kommer den att flylla listelementet med anchor taggen.*/
}

.dropdown-meny li:last-child { /*Detta är en strukturell psuedoklass, den kommer att välja det li element som är det sista barnet inom dropdown meny. I det här fallet så använder jag det för att göra så att det sista list elementet inte har någon padding under sig.*/
	padding-bottom: 0px;
}

.dropdown-meny li:first-child { /*Här gör jag så att det första listelementet inte har någon padding över sig.*/
	padding-top: 0px;
}

.dropdown-meny li a:hover { /*Detta fungerar precis som den andra hover psuedoklassen som jag använde mig av fast i det här fallet så ändrar den bakgrundsfärgen på varje individuellt list element nät de hovras över.*/
	background-color: #2a4228;
}


main { /*Ger main grid-template-arean av main så att den visas på rätt ställe i min grid layout.*/
	grid-template-areas: main;
}

.main-container { /*Ger main-containern en grid layout*/
	display: grid;
	grid-template-columns: auto; 
	grid-template-rows: auto; /*När vi använder oss av sections i HTLM dokumentet så behöver vi inte deklarera templates med värden utan det räcker att skriva "auto" och så kommer det att skapas en lämplig grid layout med en sektion i varje ruta.*/
	grid-gap: 30px;
	padding: 20px;
}

caption {
	padding: 10px;
	font-size: 24px;
	font-family: Arial, Helvetica, sans-serif
}

table {
	border-collapse: collapse;
}

table,
th,
td {
	border-width: 1px;
	border-style: solid;
}

th,
td {
	padding: 15px;
}

th:nth-child(1) {
	text-align: left;
}

th:nth-child(3) {
	text-align: right;
}

td:nth-child(2),
td:nth-child(3) {
	text-align: center;
}

td:nth-child(4) {
	text-align: right;
}

tr:nth-child(even) {
	background-color: #2d2314;
}

tr:nth-child(odd) {
	background-color: #1a140c;
}

tr:hover {
	background-color: #362b1c;
}

td:hover, th:hover {
	background-color: #52432e;
}

main a {
	text-decoration: none;
	color: inherit;
}

h1,
h2,
h3,
h4 {
	color: #babfe5;
}

main section:nth-child(1) {
	border-width: 3px;
	border-style: solid;
	border-color: #d3af86;
	padding: 20px;
}

main section:nth-child(2) {
	color: #f79a32;
	background-color: #473624;
	padding: 10px;
}

aside {
	grid-area: aside;
	display: grid;
	grid-template-rows: min-content;
	grid-gap: 70px;
	margin: auto;
	margin-top: 25px;
}

.aside-2 {
	grid-area: aside-2;
}

.aside-2 img {
	transform: scaleX(-1);
}

.overlay-container {
	position: relative;
}

aside img {
	display: block;
	max-width: 400px;
}

.overlay {
	position: absolute;
	bottom: 0;
	background: rgba(0, 0, 0, 0.5);
	width: 400px;
	transition: .5s ease;
	opacity: 0;
	color: #d3af86;
	padding: 15px 0px 15px 0px;
	font-size: 20px;
	text-align: center;
}

.overlay-container:hover .overlay {
	opacity: 1;
}

footer {
	grid-area: footer;
}

h4 {
	font-size: 16px;
}

footer p {
	font-size: 12px;
}